# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: master
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from client.models.v2_metric_status import V2MetricStatus

class TestV2MetricStatus(unittest.TestCase):
    """V2MetricStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2MetricStatus:
        """Test V2MetricStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2MetricStatus`
        """
        model = V2MetricStatus()
        if include_optional:
            return V2MetricStatus(
                container_resource = client.models.v2/container_resource_metric_status.v2.ContainerResourceMetricStatus(
                    container = '', 
                    current = client.models.v2/metric_value_status.v2.MetricValueStatus(
                        average_utilization = 56, 
                        average_value = '', 
                        value = '', ), 
                    name = '', ),
                external = client.models.v2/external_metric_status.v2.ExternalMetricStatus(
                    current = client.models.v2/metric_value_status.v2.MetricValueStatus(
                        average_utilization = 56, 
                        average_value = '', 
                        value = '', ), 
                    metric = client.models.v2/metric_identifier.v2.MetricIdentifier(
                        name = '', 
                        selector = client.models.v1/label_selector.v1.LabelSelector(
                            match_expressions = [
                                client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_labels = {
                                'key' : ''
                                }, ), ), ),
                object = client.models.v2/object_metric_status.v2.ObjectMetricStatus(
                    current = client.models.v2/metric_value_status.v2.MetricValueStatus(
                        average_utilization = 56, 
                        average_value = '', 
                        value = '', ), 
                    described_object = client.models.v2/cross_version_object_reference.v2.CrossVersionObjectReference(
                        api_version = '', 
                        kind = '', 
                        name = '', ), 
                    metric = client.models.v2/metric_identifier.v2.MetricIdentifier(
                        name = '', 
                        selector = client.models.v1/label_selector.v1.LabelSelector(
                            match_expressions = [
                                client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_labels = {
                                'key' : ''
                                }, ), ), ),
                pods = client.models.v2/pods_metric_status.v2.PodsMetricStatus(
                    current = client.models.v2/metric_value_status.v2.MetricValueStatus(
                        average_utilization = 56, 
                        average_value = '', 
                        value = '', ), 
                    metric = client.models.v2/metric_identifier.v2.MetricIdentifier(
                        name = '', 
                        selector = client.models.v1/label_selector.v1.LabelSelector(
                            match_expressions = [
                                client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_labels = {
                                'key' : ''
                                }, ), ), ),
                resource = client.models.v2/resource_metric_status.v2.ResourceMetricStatus(
                    current = client.models.v2/metric_value_status.v2.MetricValueStatus(
                        average_utilization = 56, 
                        average_value = '', 
                        value = '', ), 
                    name = '', ),
                type = ''
            )
        else:
            return V2MetricStatus(
                type = '',
        )
        """

    def testV2MetricStatus(self):
        """Test V2MetricStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
