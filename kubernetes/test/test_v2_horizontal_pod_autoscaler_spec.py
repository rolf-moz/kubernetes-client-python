# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: master
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from client.models.v2_horizontal_pod_autoscaler_spec import V2HorizontalPodAutoscalerSpec

class TestV2HorizontalPodAutoscalerSpec(unittest.TestCase):
    """V2HorizontalPodAutoscalerSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2HorizontalPodAutoscalerSpec:
        """Test V2HorizontalPodAutoscalerSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2HorizontalPodAutoscalerSpec`
        """
        model = V2HorizontalPodAutoscalerSpec()
        if include_optional:
            return V2HorizontalPodAutoscalerSpec(
                behavior = client.models.v2/horizontal_pod_autoscaler_behavior.v2.HorizontalPodAutoscalerBehavior(
                    scale_down = client.models.v2/hpa_scaling_rules.v2.HPAScalingRules(
                        policies = [
                            client.models.v2/hpa_scaling_policy.v2.HPAScalingPolicy(
                                period_seconds = 56, 
                                type = '', 
                                value = 56, )
                            ], 
                        select_policy = '', 
                        stabilization_window_seconds = 56, ), 
                    scale_up = client.models.v2/hpa_scaling_rules.v2.HPAScalingRules(
                        select_policy = '', 
                        stabilization_window_seconds = 56, ), ),
                max_replicas = 56,
                metrics = [
                    client.models.v2/metric_spec.v2.MetricSpec(
                        container_resource = client.models.v2/container_resource_metric_source.v2.ContainerResourceMetricSource(
                            container = '', 
                            name = '', 
                            target = client.models.v2/metric_target.v2.MetricTarget(
                                average_utilization = 56, 
                                average_value = '', 
                                type = '', 
                                value = '', ), ), 
                        external = client.models.v2/external_metric_source.v2.ExternalMetricSource(
                            metric = client.models.v2/metric_identifier.v2.MetricIdentifier(
                                name = '', 
                                selector = client.models.v1/label_selector.v1.LabelSelector(
                                    match_expressions = [
                                        client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                            key = '', 
                                            operator = '', 
                                            values = [
                                                ''
                                                ], )
                                        ], 
                                    match_labels = {
                                        'key' : ''
                                        }, ), ), 
                            target = client.models.v2/metric_target.v2.MetricTarget(
                                average_utilization = 56, 
                                average_value = '', 
                                type = '', 
                                value = '', ), ), 
                        object = client.models.v2/object_metric_source.v2.ObjectMetricSource(
                            described_object = client.models.v2/cross_version_object_reference.v2.CrossVersionObjectReference(
                                api_version = '', 
                                kind = '', 
                                name = '', ), 
                            metric = client.models.v2/metric_identifier.v2.MetricIdentifier(
                                name = '', ), 
                            target = , ), 
                        pods = client.models.v2/pods_metric_source.v2.PodsMetricSource(
                            metric = , 
                            target = , ), 
                        resource = client.models.v2/resource_metric_source.v2.ResourceMetricSource(
                            name = '', 
                            target = , ), 
                        type = '', )
                    ],
                min_replicas = 56,
                scale_target_ref = client.models.v2/cross_version_object_reference.v2.CrossVersionObjectReference(
                    api_version = '', 
                    kind = '', 
                    name = '', )
            )
        else:
            return V2HorizontalPodAutoscalerSpec(
                max_replicas = 56,
                scale_target_ref = client.models.v2/cross_version_object_reference.v2.CrossVersionObjectReference(
                    api_version = '', 
                    kind = '', 
                    name = '', ),
        )
        """

    def testV2HorizontalPodAutoscalerSpec(self):
        """Test V2HorizontalPodAutoscalerSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
